// import { createRequire } from 'node:module';
import { fileURLToPath } from 'node:url';
import path from 'node:path';
import os from 'node:os';
import fs from 'node:fs';
import { spawn } from 'node:child_process';
import {
  BrowserWindow,
  Menu,
  app,
  dialog,
  globalShortcut,
  ipcMain,
  shell,
} from 'electron';

import { ref } from 'vue';
// const require = createRequire(import.meta.url);
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const canExit = ref<boolean>(false);

Menu.setApplicationMenu(null);
// Á¶ÅÁî® GPU Âä†ÈÄü
app.commandLine.appendSwitch('disable-gpu');
// The built directory structure
//
// ‚îú‚îÄ‚î¨ dist-electron
// ‚îÇ ‚îú‚îÄ‚î¨ main
// ‚îÇ ‚îÇ ‚îî‚îÄ‚îÄ index.js    > Electron-Main
// ‚îÇ ‚îî‚îÄ‚î¨ preload
// ‚îÇ   ‚îî‚îÄ‚îÄ index.mjs   > Preload-Scripts
// ‚îú‚îÄ‚î¨ dist
// ‚îÇ ‚îî‚îÄ‚îÄ index.html    > Electron-Renderer
//
process.env.APP_ROOT = path.join(__dirname, '../..');

export const MAIN_DIST = path.join(process.env.APP_ROOT, 'dist-electron');
export const RENDERER_DIST = path.join(process.env.APP_ROOT, 'dist');
export const VITE_DEV_SERVER_URL = process.env.VITE_DEV_SERVER_URL;

process.env.VITE_PUBLIC = VITE_DEV_SERVER_URL
  ? path.join(process.env.APP_ROOT, 'public')
  : RENDERER_DIST;

// Disable GPU Acceleration for Windows 7
if (os.release().startsWith('6.1'))
  app.disableHardwareAcceleration();

// Set application name for Windows 10+ notifications
if (process.platform === 'win32')
  app.setAppUserModelId(app.getName());

if (!app.requestSingleInstanceLock()) {
  app.quit();
  process.exit(0);
}
// ËØªÂèñÈÖçÁΩÆÊñá‰ª∂
function readConfig() {
  let configPath;
  // Âú®Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É‰∏≠Ôºå‰ΩøÁî® VITE_PUBLIC Ë∑ØÂæÑ
  if (process.env.VITE_DEV_SERVER_URL) {
    configPath = path.join(process.env.VITE_PUBLIC, 'configDev.json');
  }
  else {
    // Âú®ÊâìÂåÖÂêéÁöÑÁéØÂ¢É‰∏≠Ôºå‰ΩøÁî® APP_ROOT Ë∑ØÂæÑ
    configPath = path.resolve(
      path.dirname(app.getPath('exe')),
      'public/configProd.json',
    );
  }

  try {
    const rawConfig = fs.readFileSync(configPath);
    // Â∞Ü Buffer ËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
    const configString = rawConfig.toString();
    // Ëß£Êûê JSON Â≠óÁ¨¶‰∏≤‰∏∫ÂØπË±°
    return JSON.parse(configString);
  }
  catch (error) {
    console.error('Error reading config file:', error);
    return {}; // Â¶ÇÊûúÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®ÊàñÊúâÈîôËØØÔºåËøîÂõû‰∏Ä‰∏™Á©∫ÂØπË±°
  }
}

const config = readConfig();
let win: BrowserWindow | null = null;
const preload = path.join(__dirname, '../preload/index.mjs');
const indexHtml = path.join(RENDERER_DIST, 'index.html');

// ÈúÄË¶ÅÊó†ÊïàÂåñÁöÑÈîÆ‰Ωç
const keysDisabled = ['f11'];

async function createWindow() {
  win = new BrowserWindow({
    title: 'Main window',
    // icon: "resources/app/resources/icon/logo.icon",
    icon: path.join(process.env.VITE_PUBLIC, 'icon/icon.ico'),
    width: config.width,
    height: config.height,
    frame: true, // ËæπÊ°ÜÊòæÁ§∫
    disableAutoHideCursor: false, // ÈöêËóèÈº†Ê†á
    fullscreen: config.fullscreen, // ÂÖ®Â±è
    autoHideMenuBar: true, // ÈöêËóèÂ∑•ÂÖ∑Ê†è
    center: true,
    // alwaysOnTop: true,//ÁΩÆÈ°∂
    // useContentSize: true,
    webPreferences: {
      contextIsolation: true, // ÈöîÁ¶ª‰∏ä‰∏ãÊñá
      webSecurity: false, // ÂºÄÂèëÁéØÂ¢ÉÁ¶ÅÊ≠¢ÂêåÊ∫êÁ≠ñÁï•ÔºåÂê¶ÂàôË∑®Ë∂äÂ§±Ë¥•
      allowRunningInsecureContent: false, // Á°Æ‰øùÊ≠§È°π‰∏∫ false
      nodeIntegration: true,
      images: true, // ÊîØÊåÅÂõæÁâá
      textAreasAreResizable: false, // ÊñáÊú¨ÂüüÂèØÊãâ‰º∏
      webgl: false, // ÊîØÊåÅwebgl/canvas
      backgroundThrottling: true, // È°µÈù¢ÈöêËóèÊó∂ËäÇËÉΩ
      // devTools: config.devTools,
      preload,
    },
  });

  if (VITE_DEV_SERVER_URL) {
    win.loadURL(VITE_DEV_SERVER_URL);
    // Open devTool if the app is not packaged
    // win.webContents.openDevTools({ mode: "detach" });
  }
  else {
    win.loadFile(indexHtml);
  }
  // ÊéßÂà∂Âè∞
  if (config.devTools)
    win.webContents.openDevTools(); // Ë∞ÉËØïÂ∑•ÂÖ∑

  // Test actively push message to the Electron-Renderer
  win.webContents.on('did-finish-load', () => {
    win?.webContents.send('main-process-message', new Date().toLocaleString());
  });

  // Make all links open with the browser, not with the application
  win.webContents.setWindowOpenHandler(({ url }) => {
    if (url.startsWith('https:'))
      shell.openExternal(url);
    return { action: 'deny' };
  });
  keysDisabled.map((key) => {
    globalShortcut.register(key, () => {
      console.log(key);
    });
    return null;
  });

  win.on('close', (event) => {
    // Âú®ËøôÈáåÁºñÂÜôÂ§ÑÁêÜÁî®Êà∑ÈÄÄÂá∫ÁöÑÈÄªËæë
    // console.log('üöÄ ~ win.on ~ canExit.value:', canExit.value);
    // Â¶ÇÊûúÈúÄË¶ÅÈòªÊ≠¢Á™óÂè£ÂÖ≥Èó≠ÔºåÂèØ‰ª•Ë∞ÉÁî® event.preventDefault()
    console.log('üöÄ ~ win.on ~ canExit.value):', canExit.value);

    if (!canExit.value) {
      win.webContents.send('confirm-quit');
      event.preventDefault();
    }
  });

  // win.webContents.on('will-navigate', (event, url) => { }) #344
}

app.whenReady().then(createWindow);

function checkForUpdate() {
  let newExePath = '';
  // Ê®°ÊãüÊ£ÄÊü•Êõ¥Êñ∞ÈÄªËæë
  if (process.env.VITE_DEV_SERVER_URL) {
    newExePath = path.join(
      process.env.APP_ROOT,
      'Light-Ink-Craftsman-1.0.1.exe',
    );
  }
  else {
    // Âú®ÊâìÂåÖÂêéÁöÑÁéØÂ¢É‰∏≠Ôºå‰ΩøÁî® APP_ROOT Ë∑ØÂæÑ
    newExePath = path.resolve(
      path.dirname(app.getPath('exe')),
      'Light-Ink-Craftsman-1.0.1.exe',
    );
  }

  const opts = {
    type: 'question',
    buttons: ['Á´ãÂç≥Êõ¥Êñ∞', 'Á®çÂêé'],
    defaultId: 0,
    message: 'Ê£ÄÊµãÂà∞Êñ∞ÁâàÊú¨ÔºåÊòØÂê¶Á´ãÂç≥Êõ¥Êñ∞Ôºü',
    detail: 'ÁÇπÂáª‚ÄúÁ´ãÂç≥Êõ¥Êñ∞‚Äù‰ª•ÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨„ÄÇ',
  };

  dialog.showMessageBox(opts).then((result) => {
    if (result.response === 0) {
      updateApp(newExePath);
    }
  });
}

function updateApp(newExePath: string) {
  if (win) {
    canExit.value = true;
    // win.close(); // ÂÖ≥Èó≠Á™óÂè£
  }

  // app.quit();
  // Âª∂Êó∂‰∏ÄÊÆµÊó∂Èó¥ÔºåÁ°Æ‰øùÊóßÁâàÊú¨ÂÆåÂÖ®ÈÄÄÂá∫
  if (process.platform === 'win32') {
    spawn(newExePath, [], {
      detached: true,
    }).unref();
    app.quit();
  }
}

app.on('window-all-closed', () => {
  win = null;
  if (process.platform !== 'darwin')
    app.quit();
});

app.on('second-instance', () => {
  if (win) {
    // Focus on the main window if the user tried to open another
    if (win.isMinimized())
      win.restore();
    win.focus();
  }
});

app.on('activate', () => {
  const allWindows = BrowserWindow.getAllWindows();
  if (allWindows.length) {
    allWindows[0].focus();
  }
  else {
    createWindow();
  }
});

// New window example arg: new windows url
ipcMain.handle('open-win', (_, arg) => {
  const childWindow = new BrowserWindow({
    webPreferences: {
      preload,
    },
  });

  if (VITE_DEV_SERVER_URL) {
    childWindow.loadURL(`${VITE_DEV_SERVER_URL}#${arg}`);
  }
  else {
    childWindow.loadFile(indexHtml, { hash: arg });
  }
});
// Ê£ÄÊµãÊõ¥Êñ∞
ipcMain.on('check-for-updates', () => {
  checkForUpdate();
});
// ËØªÈÖçÁΩÆÊñá‰ª∂
ipcMain.handle('get-config', async () => {
  return config;
});
// ‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂
ipcMain.handle('modify-config', async (key, value) => {
  let configPath;
  if (process.env.VITE_DEV_SERVER_URL) {
    configPath = path.join(process.env.VITE_PUBLIC, 'config.json');
  }
  else {
    configPath = path.resolve(
      path.dirname(process.execPath),
      'resources/app/public/config.json',
    );
  }

  try {
    const rawConfig = fs.readFileSync(configPath);
    const config = JSON.parse(rawConfig.toString());

    // Á°Æ‰øù key ÊòØ‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤
    if (typeof key !== 'string') {
      console.error('Key must be a string');
      return false;
    }

    // ‰øÆÊîπÊåáÂÆöÈîÆÁöÑÂÄº
    config[key] = value;

    // Á°Æ‰øùÊ≤°ÊúâÂ∞ÜÂØπË±°‰Ωú‰∏∫ÈîÆË¶ÜÁõñÂ∑≤ÊúâÁöÑÈîÆ
    const configString = JSON.stringify(
      config,
      (k, v) => {
        if (typeof k === 'object')
          return undefined; // ÂøΩÁï•ÂØπË±°‰Ωú‰∏∫ÈîÆ
        return v;
      },
      2,
    );

    fs.writeFileSync(configPath, configString);
    console.log('Config file modified successfully');
    return true; // ËøîÂõû true Ë°®Á§∫‰øÆÊîπÊàêÂäü
  }
  catch (error) {
    console.error('Error modifying config file:', error);
    return false; // ËøîÂõû false Ë°®Á§∫‰øÆÊîπÂ§±Ë¥•
  }
});
// ÁõëÂê¨Ê∏≤ÊüìËøõÁ®ãÂèëÈÄÅÁöÑÈÄÄÂá∫‰∫ã‰ª∂
ipcMain.on('quit-app', () => {
  // app.quit();
  canExit.value = true;
  win.close(); // ÂÖ≥Èó≠Á™óÂè£
});
